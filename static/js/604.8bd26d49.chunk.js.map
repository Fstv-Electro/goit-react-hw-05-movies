{"version":3,"file":"static/js/604.8bd26d49.chunk.js","mappings":"uUAEMA,EAAS,mCACfC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAa,mCAAG,oGACTD,EAAAA,EAAAA,IAAA,qCAAwCD,IAD/B,cACrBG,EADqB,yBAGpBA,EAAIC,KAAKC,SAHW,2CAAH,qDAMbC,EAAW,mCAAG,WAAMC,GAAN,uFACPN,EAAAA,EAAAA,IAAA,+BACQD,EADR,iCACuCO,EADvC,gCADO,cACnBJ,EADmB,yBAKlBA,EAAIC,KAAKC,SALS,2CAAH,sDAQXG,EAAiB,mCAAG,WAAMC,GAAN,uFACbR,EAAAA,EAAAA,IAAA,gBAAmBQ,EAAnB,oBAAiCT,EAAjC,oBADa,cACzBG,EADyB,yBAExBA,EAAIC,MAFoB,2CAAH,sDAKjBM,EAAiB,mCAAG,WAAMD,GAAN,uFACbR,EAAAA,EAAAA,IAAA,gBACPQ,EADO,4BACeT,EADf,oBADa,cACzBG,EADyB,yBAIxBA,EAAIC,KAAKO,MAJe,2CAAH,sDAOjBC,EAAiB,mCAAG,WAAMH,GAAN,uFACbR,EAAAA,EAAAA,IAAA,gBACPQ,EADO,4BACeT,EADf,2BADa,cACzBG,EADyB,yBAKxBA,EAAIC,KAAKC,SALe,2CAAH,sDAQjBQ,EAAa,iC,mGCpCbC,EAAOC,EAAAA,GAAAA,GAAH,oIAQJC,EAAOD,EAAAA,GAAAA,GAAH,sEAKJE,GAAYF,EAAAA,EAAAA,IAAOG,EAAAA,GAAPH,CAAH,wL,SCZTI,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnBC,GAAWC,EAAAA,EAAAA,MACjB,OACI,+BACI,SAACR,EAAD,UACKM,EAAOG,KAAI,SAAAC,GAAK,OACb,SAACR,EAAD,WACI,SAACC,EAAD,CAAWQ,GAAE,kBAAaD,EAAMf,IAAMiB,MAAO,CAAEC,KAAMN,GAArD,SACKG,EAAMI,SAFJJ,EAAMf,GADJ,OAUhC,C,wJCjBYoB,EAAS,WAClB,OACI,SAAC,KAAD,CACIC,OAAQ,GACRC,MAAO,GACPC,MAAM,UACNC,aAAc,CAAC,EACfC,aAAa,GACbC,SAAS,EACTC,UAAU,eACVC,eAAe,UACfC,YAAa,EACbC,qBAAsB,GAGjC,ECeD,EA3Ba,WACT,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOpB,EAAP,KAAeqB,EAAf,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,oGAEQD,GAAa,GAFrB,UAG2BzC,EAAAA,EAAAA,MAH3B,OAGcE,EAHd,OAIQqC,EAAUrC,GAJlB,gDAMQyC,QAAQC,IAAIC,OANpB,yBAQQJ,GAAa,GARrB,6EADY,uBAAC,WAAD,wBAYZK,EACH,GAAE,KAGC,6BACI,qCACCN,GAAY,SAACb,EAAD,KAAa,SAAC,IAAD,CAAYT,OAAQA,MAGzD,C","sources":["API.js","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/Loader.jsx","pages/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = 'bdf7291b5a7be013f42f0c0b2cf5cd5d';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrending = async () => {\n  const res = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n\n  return res.data.results;\n};\n\nexport const fetchSearch = async query => {\n  const res = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n\n  return res.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const res = await axios.get(`movie/${id}?api_key=${apiKey}&language=en-US`);\n  return res.data;\n};\n\nexport const fetchMovieCredits = async id => {\n  const res = await axios.get(\n    `movie/${id}/credits?api_key=${apiKey}&language=en-US`\n  );\n  return res.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const res = await axios.get(\n    `movie/${id}/reviews?api_key=${apiKey}&language=en-US&page=1`\n  );\n\n  return res.data.results;\n};\n\nexport const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n","import styled from \"styled-components\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const List = styled.ul`\n    display: flex;\n    flex-direction: column;\n    list-style: none;\n    margin: 16px 0;\n    gap: 8px;\n`;\n\nexport const Item = styled.li`\n    display: inline-block;\n    width: 100%;\n`;\n\nexport const MovieLink = styled(NavLink)`\n    display: inline-block;\n    padding: 4px 16px;\n    color: black;\n    text-decoration: none;\n\n    :hover,\n    :focus {\n        color: #8a38c5;\n    }\n`;","import PropTypes from 'prop-types';\nimport { useLocation } from \"react-router-dom\";\nimport { MovieLink, Item, List } from \"./MovieList.styled\";\n\nexport const MoviesList = ({ movies }) => {\n    const location = useLocation();\n    return (\n        <>\n            <List>\n                {movies.map(movie => (\n                    <Item key={movie.id}>\n                        <MovieLink to={`/movies/${movie.id}`} state={{ from: location }}>\n                            {movie.title}\n                        </MovieLink>\n                    </Item>\n                ))}\n            </List>\n        </>\n    );\n};\n\nMoviesList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n        }).isRequired\n    ).isRequired,\n};\n\n","import { Oval } from \"react-loader-spinner\";\n\nexport const Loader = () => {\n    return (\n        <Oval\n            height={80}\n            width={80}\n            color=\"#4fa94d\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n            visible={true}\n            ariaLabel='oval-loading'\n            secondaryColor=\"#4fa94d\"\n            strokeWidth={2}\n            strokeWidthSecondary={2}\n        />\n    );\n}","import { useState, useEffect } from \"react\";\nimport { MoviesList } from \"components/MovieList/MovieList\";\nimport { fetchTrending } from \"API\";\nimport { Loader } from \"components/Loader\";\n\nconst Home = () => {\n    const [movies, setMovies] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        async function fetchMovies() {\n            try {\n                setIsLoading(true);\n                const data = await fetchTrending();\n                setMovies(data);\n            } catch {\n                console.log(Error);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchMovies();\n    }, []);\n\n    return (\n        <main>\n            <h1>Trending</h1>\n            {isLoading ? <Loader /> : <MoviesList movies={movies} />}\n        </main>\n    );\n};\n\nexport default Home;"],"names":["apiKey","axios","fetchTrending","res","data","results","fetchSearch","query","fetchMovieDetails","id","fetchMovieCredits","cast","fetchMovieReviews","baseImgUrl","List","styled","Item","MovieLink","NavLink","MoviesList","movies","location","useLocation","map","movie","to","state","from","title","Loader","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","secondaryColor","strokeWidth","strokeWidthSecondary","useState","setMovies","isLoading","setIsLoading","useEffect","console","log","Error","fetchMovies"],"sourceRoot":""}